// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: admin.sql

package db

import (
	"context"
	"database/sql"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admins (email, password)
VALUES ($1, $2)
RETURNING id, email, created_at
`

type CreateAdminParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CreateAdminRow struct {
	ID        int32        `json:"id"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (CreateAdminRow, error) {
	row := q.db.QueryRowContext(ctx, createAdmin, arg.Email, arg.Password)
	var i CreateAdminRow
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return i, err
}

const deleteAlladmins = `-- name: DeleteAlladmins :exec
DELETE FROM admins
`

func (q *Queries) DeleteAlladmins(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAlladmins)
	return err
}

const getAdminByEmail = `-- name: GetAdminByEmail :one
SELECT id, email, password, created_at, updated_at FROM admins
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetAdminByEmail(ctx context.Context, email string) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdminByEmail, email)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
