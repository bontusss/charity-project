// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: project.sql

package db

import (
	"context"
	"database/sql"
)

const addProjectImage = `-- name: AddProjectImage :one
INSERT INTO project_images (project_id, phase, image_link)
VALUES ($1, $2, $3)
RETURNING id, project_id, phase, image_link, created_at
`

type AddProjectImageParams struct {
	ProjectID int32  `json:"project_id"`
	Phase     string `json:"phase"`
	ImageLink string `json:"image_link"`
}

func (q *Queries) AddProjectImage(ctx context.Context, arg AddProjectImageParams) (ProjectImage, error) {
	row := q.db.QueryRowContext(ctx, addProjectImage, arg.ProjectID, arg.Phase, arg.ImageLink)
	var i ProjectImage
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.Phase,
		&i.ImageLink,
		&i.CreatedAt,
	)
	return i, err
}

const createProject = `-- name: CreateProject :one
INSERT INTO projects (name, status)
VALUES ($1, 'ongoing')
RETURNING id, name, status, created_at, updated_at
`

func (q *Queries) CreateProject(ctx context.Context, name string) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject, name)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createProjectAfter = `-- name: CreateProjectAfter :one
INSERT INTO project_after (project_id, body, project_cost, video_link)
VALUES ($1, $2, $3, $4)
RETURNING project_id, body, project_cost, video_link, created_at, updated_at
`

type CreateProjectAfterParams struct {
	ProjectID   int32          `json:"project_id"`
	Body        sql.NullString `json:"body"`
	ProjectCost sql.NullInt32  `json:"project_cost"`
	VideoLink   sql.NullString `json:"video_link"`
}

func (q *Queries) CreateProjectAfter(ctx context.Context, arg CreateProjectAfterParams) (ProjectAfter, error) {
	row := q.db.QueryRowContext(ctx, createProjectAfter,
		arg.ProjectID,
		arg.Body,
		arg.ProjectCost,
		arg.VideoLink,
	)
	var i ProjectAfter
	err := row.Scan(
		&i.ProjectID,
		&i.Body,
		&i.ProjectCost,
		&i.VideoLink,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createProjectBefore = `-- name: CreateProjectBefore :one
INSERT INTO project_before (project_id, body, estimated_target, current_funds, video_link)
VALUES ($1, $2, $3, $4, $5)
RETURNING project_id, body, estimated_target, current_funds, video_link, created_at, updated_at
`

type CreateProjectBeforeParams struct {
	ProjectID       int32          `json:"project_id"`
	Body            string         `json:"body"`
	EstimatedTarget int32          `json:"estimated_target"`
	CurrentFunds    int32          `json:"current_funds"`
	VideoLink       sql.NullString `json:"video_link"`
}

func (q *Queries) CreateProjectBefore(ctx context.Context, arg CreateProjectBeforeParams) (ProjectBefore, error) {
	row := q.db.QueryRowContext(ctx, createProjectBefore,
		arg.ProjectID,
		arg.Body,
		arg.EstimatedTarget,
		arg.CurrentFunds,
		arg.VideoLink,
	)
	var i ProjectBefore
	err := row.Scan(
		&i.ProjectID,
		&i.Body,
		&i.EstimatedTarget,
		&i.CurrentFunds,
		&i.VideoLink,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllProjectImages = `-- name: DeleteAllProjectImages :exec
DELETE FROM project_images
WHERE project_id = $1
`

func (q *Queries) DeleteAllProjectImages(ctx context.Context, projectID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAllProjectImages, projectID)
	return err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const deleteProjectAfter = `-- name: DeleteProjectAfter :exec
DELETE FROM project_after
WHERE project_id = $1
`

func (q *Queries) DeleteProjectAfter(ctx context.Context, projectID int32) error {
	_, err := q.db.ExecContext(ctx, deleteProjectAfter, projectID)
	return err
}

const deleteProjectBefore = `-- name: DeleteProjectBefore :exec
DELETE FROM project_before
WHERE project_id = $1
`

func (q *Queries) DeleteProjectBefore(ctx context.Context, projectID int32) error {
	_, err := q.db.ExecContext(ctx, deleteProjectBefore, projectID)
	return err
}

const deleteProjectImage = `-- name: DeleteProjectImage :exec
DELETE FROM project_images
WHERE id = $1
`

func (q *Queries) DeleteProjectImage(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProjectImage, id)
	return err
}

const getProject = `-- name: GetProject :one
SELECT id, name, status, created_at, updated_at FROM projects
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetProject(ctx context.Context, id int32) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectAfter = `-- name: GetProjectAfter :one
SELECT project_id, body, project_cost, video_link, created_at, updated_at FROM project_after
WHERE project_id = $1
LIMIT 1
`

func (q *Queries) GetProjectAfter(ctx context.Context, projectID int32) (ProjectAfter, error) {
	row := q.db.QueryRowContext(ctx, getProjectAfter, projectID)
	var i ProjectAfter
	err := row.Scan(
		&i.ProjectID,
		&i.Body,
		&i.ProjectCost,
		&i.VideoLink,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectBefore = `-- name: GetProjectBefore :one
SELECT project_id, body, estimated_target, current_funds, video_link, created_at, updated_at FROM project_before
WHERE project_id = $1
LIMIT 1
`

func (q *Queries) GetProjectBefore(ctx context.Context, projectID int32) (ProjectBefore, error) {
	row := q.db.QueryRowContext(ctx, getProjectBefore, projectID)
	var i ProjectBefore
	err := row.Scan(
		&i.ProjectID,
		&i.Body,
		&i.EstimatedTarget,
		&i.CurrentFunds,
		&i.VideoLink,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProjectImages = `-- name: ListProjectImages :many
SELECT id, project_id, phase, image_link, created_at FROM project_images
WHERE project_id = $1
ORDER BY created_at ASC
`

func (q *Queries) ListProjectImages(ctx context.Context, projectID int32) ([]ProjectImage, error) {
	rows, err := q.db.QueryContext(ctx, listProjectImages, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProjectImage{}
	for rows.Next() {
		var i ProjectImage
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Phase,
			&i.ImageLink,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectImagesByPhase = `-- name: ListProjectImagesByPhase :many
SELECT id, project_id, phase, image_link, created_at FROM project_images
WHERE project_id = $1
  AND phase = $2
ORDER BY created_at ASC
`

type ListProjectImagesByPhaseParams struct {
	ProjectID int32  `json:"project_id"`
	Phase     string `json:"phase"`
}

func (q *Queries) ListProjectImagesByPhase(ctx context.Context, arg ListProjectImagesByPhaseParams) ([]ProjectImage, error) {
	rows, err := q.db.QueryContext(ctx, listProjectImagesByPhase, arg.ProjectID, arg.Phase)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProjectImage{}
	for rows.Next() {
		var i ProjectImage
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.Phase,
			&i.ImageLink,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjects = `-- name: ListProjects :many
SELECT id, name, status, created_at, updated_at FROM projects
ORDER BY created_at DESC
`

func (q *Queries) ListProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectsByStatus = `-- name: ListProjectsByStatus :many
SELECT id, name, status, created_at, updated_at FROM projects
WHERE status = $1
ORDER BY created_at DESC
`

func (q *Queries) ListProjectsByStatus(ctx context.Context, status string) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjectsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET name = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, status, created_at, updated_at
`

type UpdateProjectParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProject, arg.ID, arg.Name)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProjectAfter = `-- name: UpdateProjectAfter :one
UPDATE project_after
SET body = $2,
    project_cost = $3,
    video_link = $4,
    updated_at = NOW()
WHERE project_id = $1
RETURNING project_id, body, project_cost, video_link, created_at, updated_at
`

type UpdateProjectAfterParams struct {
	ProjectID   int32          `json:"project_id"`
	Body        sql.NullString `json:"body"`
	ProjectCost sql.NullInt32  `json:"project_cost"`
	VideoLink   sql.NullString `json:"video_link"`
}

func (q *Queries) UpdateProjectAfter(ctx context.Context, arg UpdateProjectAfterParams) (ProjectAfter, error) {
	row := q.db.QueryRowContext(ctx, updateProjectAfter,
		arg.ProjectID,
		arg.Body,
		arg.ProjectCost,
		arg.VideoLink,
	)
	var i ProjectAfter
	err := row.Scan(
		&i.ProjectID,
		&i.Body,
		&i.ProjectCost,
		&i.VideoLink,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProjectBefore = `-- name: UpdateProjectBefore :one
UPDATE project_before
SET body = $2,
    estimated_target = $3,
    current_funds = $4,
    video_link = $5,
    updated_at = NOW()
WHERE project_id = $1
RETURNING project_id, body, estimated_target, current_funds, video_link, created_at, updated_at
`

type UpdateProjectBeforeParams struct {
	ProjectID       int32          `json:"project_id"`
	Body            string         `json:"body"`
	EstimatedTarget int32          `json:"estimated_target"`
	CurrentFunds    int32          `json:"current_funds"`
	VideoLink       sql.NullString `json:"video_link"`
}

func (q *Queries) UpdateProjectBefore(ctx context.Context, arg UpdateProjectBeforeParams) (ProjectBefore, error) {
	row := q.db.QueryRowContext(ctx, updateProjectBefore,
		arg.ProjectID,
		arg.Body,
		arg.EstimatedTarget,
		arg.CurrentFunds,
		arg.VideoLink,
	)
	var i ProjectBefore
	err := row.Scan(
		&i.ProjectID,
		&i.Body,
		&i.EstimatedTarget,
		&i.CurrentFunds,
		&i.VideoLink,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProjectStatus = `-- name: UpdateProjectStatus :one
UPDATE projects
SET status = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, status, created_at, updated_at
`

type UpdateProjectStatusParams struct {
	ID     int32  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateProjectStatus(ctx context.Context, arg UpdateProjectStatusParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProjectStatus, arg.ID, arg.Status)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
