// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Dashboard() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"container-fluid\"><div class=\"row\"><div class=\"col-md-6\"><div class=\"card\"><div class=\"card-header\"><h5 class=\"card-title mb-0\">Project Management</h5></div><div class=\"card-body\"><button class=\"btn btn-primary mb-3\" onclick=\"showCreateProjectModal()\"><i class=\"fas fa-plus\"></i> Create New Project</button><div id=\"projectsList\"><!-- Projects will be loaded here --><div class=\"text-center\"><div class=\"spinner-border\" role=\"status\"><span class=\"visually-hidden\">Loading...</span></div></div></div></div></div></div><div class=\"col-md-6\"><div class=\"card\"><div class=\"card-header\"><h5 class=\"card-title mb-0\">Blog Post Management</h5></div><div class=\"card-body\"><button class=\"btn btn-success mb-3\" onclick=\"showCreateBlogModal()\"><i class=\"fas fa-plus\"></i> Create New Blog Post</button><div id=\"blogPostsList\"><!-- Blog posts will be loaded here --><div class=\"text-center\"><div class=\"spinner-border\" role=\"status\"><span class=\"visually-hidden\">Loading...</span></div></div></div></div></div></div><div class=\"col-md-4\"><div class=\"card\"><div class=\"card-header\"><h5 class=\"card-title mb-0\">Quick Actions</h5></div><div class=\"card-body\"><div class=\"list-group\"><a href=\"/projects\" class=\"list-group-item list-group-item-action\"><i class=\"fas fa-eye\"></i> View Public Projects</a> <a href=\"/admin/login\" class=\"list-group-item list-group-item-action\"><i class=\"fas fa-sign-out-alt\"></i> Logout</a></div></div></div></div></div></div><!-- Create Project Modal --> <div class=\"modal fade\" id=\"createProjectModal\" tabindex=\"-1\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"modal-header\"><h5 class=\"modal-title\">Create New Project</h5><button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button></div><div class=\"modal-body\"><form id=\"createProjectForm\"><div class=\"mb-3\"><label for=\"projectName\" class=\"form-label\">Project Name</label> <input type=\"text\" class=\"form-control\" id=\"projectName\" name=\"name\" required></div></form></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button> <button type=\"button\" class=\"btn btn-primary\" onclick=\"createProject()\">Create Project</button></div></div></div></div><!-- Project Details Modal --> <div class=\"modal fade\" id=\"projectDetailsModal\" tabindex=\"-1\"><div class=\"modal-dialog modal-xl\"><div class=\"modal-content\"><div class=\"modal-header\"><h5 class=\"modal-title\">Project Details</h5><button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button></div><div class=\"modal-body\"><div id=\"projectDetailsContent\"><!-- Project details will be loaded here --></div></div></div></div></div><!-- Project Before Modal --> <div class=\"modal fade\" id=\"projectBeforeModal\" tabindex=\"-1\"><div class=\"modal-dialog modal-lg\"><div class=\"modal-content\"><div class=\"modal-header\"><h5 class=\"modal-title\">Project Before Details</h5><button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button></div><div class=\"modal-body\"><form id=\"projectBeforeForm\"><input type=\"hidden\" id=\"beforeProjectId\"><div class=\"mb-3\"><label for=\"beforeBody\" class=\"form-label\">Description</label> <textarea class=\"form-control\" id=\"beforeBody\" rows=\"4\" required></textarea></div><div class=\"mb-3\"><label for=\"estimatedTarget\" class=\"form-label\">Estimated Target (Amount)</label> <input type=\"number\" class=\"form-control\" id=\"estimatedTarget\" required></div><div class=\"mb-3\"><label for=\"beforeVideoLink\" class=\"form-label\">Video Link (Optional)</label> <input type=\"url\" class=\"form-control\" id=\"beforeVideoLink\"></div><div class=\"mb-3\"><label for=\"beforeImage\" class=\"form-label\">Upload Before Image</label> <input type=\"file\" class=\"form-control\" id=\"beforeImage\" accept=\"image/*\"></div></form></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button> <button type=\"button\" class=\"btn btn-primary\" onclick=\"saveProjectBefore()\">Save Before Details</button></div></div></div></div><!-- Project After Modal --> <div class=\"modal fade\" id=\"projectAfterModal\" tabindex=\"-1\"><div class=\"modal-dialog modal-lg\"><div class=\"modal-content\"><div class=\"modal-header\"><h5 class=\"modal-title\">Project After Details</h5><button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button></div><div class=\"modal-body\"><form id=\"projectAfterForm\"><input type=\"hidden\" id=\"afterProjectId\"><div class=\"mb-3\"><label for=\"afterBody\" class=\"form-label\">Description</label> <textarea class=\"form-control\" id=\"afterBody\" rows=\"4\" required></textarea></div><div class=\"mb-3\"><label for=\"projectCost\" class=\"form-label\">Actual Project Cost (Optional)</label> <input type=\"number\" class=\"form-control\" id=\"projectCost\"></div><div class=\"mb-3\"><label for=\"afterVideoLink\" class=\"form-label\">Video Link (Optional)</label> <input type=\"url\" class=\"form-control\" id=\"afterVideoLink\"></div><div class=\"mb-3\"><label for=\"afterImage\" class=\"form-label\">Upload After Image</label> <input type=\"file\" class=\"form-control\" id=\"afterImage\" accept=\"image/*\"></div></form></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button> <button type=\"button\" class=\"btn btn-primary\" onclick=\"saveProjectAfter()\">Save After Details</button></div></div></div></div><!-- Create Blog Post Modal --> <div class=\"modal fade\" id=\"createBlogModal\" tabindex=\"-1\"><div class=\"modal-dialog modal-lg\"><div class=\"modal-content\"><div class=\"modal-header\"><h5 class=\"modal-title\">Create New Blog Post</h5><button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button></div><div class=\"modal-body\"><form id=\"createBlogForm\"><div class=\"mb-3\"><label for=\"blogTitle\" class=\"form-label\">Title</label> <input type=\"text\" class=\"form-control\" id=\"blogTitle\" name=\"title\" required></div><div class=\"mb-3\"><label for=\"blogBody\" class=\"form-label\">Content</label> <textarea class=\"form-control\" id=\"blogBody\" name=\"body\" rows=\"6\" required></textarea></div><div class=\"mb-3\"><label for=\"blogImage\" class=\"form-label\">Upload Image (Optional)</label> <input type=\"file\" class=\"form-control\" id=\"blogImage\" name=\"image\" accept=\"image/*\"></div></form></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button> <button type=\"button\" class=\"btn btn-success\" onclick=\"createBlogPost()\">Create Blog Post</button></div></div></div></div><!-- Edit Project Modal --> <div class=\"modal fade\" id=\"editProjectModal\" tabindex=\"-1\"><div class=\"modal-dialog\"><div class=\"modal-content\"><div class=\"modal-header\"><h5 class=\"modal-title\">Edit Project</h5><button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button></div><div class=\"modal-body\"><form id=\"editProjectForm\"><input type=\"hidden\" id=\"editProjectId\"><div class=\"mb-3\"><label for=\"editProjectName\" class=\"form-label\">Project Name</label> <input type=\"text\" class=\"form-control\" id=\"editProjectName\" name=\"name\" required></div><div class=\"mb-3\"><label for=\"editTargetAmount\" class=\"form-label\">Target Amount</label> <input type=\"number\" class=\"form-control\" id=\"editTargetAmount\" required></div><div class=\"mb-3\"><label for=\"editCurrentAmount\" class=\"form-label\">Current Raised Amount</label> <input type=\"number\" class=\"form-control\" id=\"editCurrentAmount\" required></div></form></div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button> <button type=\"button\" class=\"btn btn-primary\" onclick=\"saveProjectEdit()\">Save Changes</button></div></div></div></div><script>\n\t\t\tlet currentProjectId = null;\n\n\t\t\t// Load projects and blog posts on page load\n\t\t\tdocument.addEventListener('DOMContentLoaded', function() {\n\t\t\t\tloadProjects();\n\t\t\t\tloadBlogPosts();\n\t\t\t});\n\n\t\t\tfunction showCreateProjectModal() {\n\t\t\t\tconst modal = new bootstrap.Modal(document.getElementById('createProjectModal'));\n\t\t\t\tmodal.show();\n\t\t\t}\n\n\t\t\tasync function createProject() {\n\t\t\t\tconst name = document.getElementById('projectName').value;\n\t\t\t\tif (!name) {\n\t\t\t\t\talert('Please enter a project name');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch('/api/projects', {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify({ name: name })\n\t\t\t\t\t});\n\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\tconst result = await response.json();\n\t\t\t\t\t\talert('Project created successfully!');\n\t\t\t\t\t\tdocument.getElementById('createProjectForm').reset();\n\t\t\t\t\t\tbootstrap.Modal.getInstance(document.getElementById('createProjectModal')).hide();\n\t\t\t\t\t\tloadProjects();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst error = await response.json();\n\t\t\t\t\t\talert('Error: ' + error.error);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\talert('Error creating project: ' + error.message);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tasync function loadProjects() {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch('/api/projects');\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\t\tdisplayProjects(data.projects);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdocument.getElementById('projectsList').innerHTML = '<p class=\"text-danger\">Error loading projects</p>';\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tdocument.getElementById('projectsList').innerHTML = '<p class=\"text-danger\">Error loading projects</p>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction displayProjects(projects) {\n\t\t\t\tconst container = document.getElementById('projectsList');\n\t\t\t\tif (projects.length === 0) {\n\t\t\t\t\tcontainer.innerHTML = '<p class=\"text-muted\">No projects found</p>';\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst html = projects.map(project => `\n\t\t\t\t\t<div class=\"card mb-3\">\n\t\t\t\t\t\t<div class=\"card-body\">\n\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t<div class=\"col-md-8\">\n\t\t\t\t\t\t\t\t\t<h6 class=\"card-title\">${project.name} <span class=\"badge bg-${project.status === 'completed' ? 'success' : 'secondary'}\">${project.status}</span></h6>\n\t\t\t\t\t\t\t\t\t<p class=\"card-text text-muted\">Created: ${new Date(project.created_at.time).toLocaleDateString()}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-4\">\n\t\t\t\t\t\t\t\t\t<div class=\"btn-group btn-group-sm w-100\">\n\t\t\t\t\t\t\t\t\t\t<button class=\"btn btn-outline-primary\" onclick=\"viewProject(${project.id})\">View</button>\n\t\t\t\t\t\t\t\t\t\t<button class=\"btn btn-outline-success\" onclick=\"editProjectBefore(${project.id})\">Before</button>\n\t\t\t\t\t\t\t\t\t\t<button class=\"btn btn-outline-info\" onclick=\"editProjectAfter(${project.id})\">After</button>\n\t\t\t\t\t\t\t\t\t\t<button class=\"btn btn-outline-secondary\" onclick=\"toggleProjectStatus(${project.id}, '${project.status}')\">${project.status === 'completed' ? 'Mark Ongoing' : 'Mark Completed'}</button>\n\t\t\t\t\t\t\t\t\t\t<button class=\"btn btn-outline-warning\" onclick=\"editProject(${project.id})\">Edit</button>\n\t\t\t\t\t\t\t\t\t\t<button class=\"btn btn-outline-danger\" onclick=\"deleteProject(${project.id})\">Delete</button>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t`).join('');\n\n\t\t\t\tcontainer.innerHTML = html;\n\t\t\t}\n\n\t\t\tasync function toggleProjectStatus(projectId, currentStatus) {\n\t\t\t\tconst nextStatus = currentStatus === 'completed' ? 'ongoing' : 'completed';\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await fetch(`/api/projects/${projectId}/status`, {\n\t\t\t\t\t\tmethod: 'PUT',\n\t\t\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\t\t\tbody: JSON.stringify({ status: nextStatus })\n\t\t\t\t\t});\n\t\t\t\t\tif (res.ok) {\n\t\t\t\t\t\tloadProjects();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst err = await res.json();\n\t\t\t\t\t\talert('Error updating status: ' + err.error);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\talert('Network error updating status: ' + e.message);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tasync function viewProject(projectId) {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(`/api/projects/${projectId}`);\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\t\tshowProjectDetails(data.project);\n\t\t\t\t\t} else {\n\t\t\t\t\t\talert('Error loading project details');\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\talert('Error loading project details: ' + error.message);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction showProjectDetails(project) {\n\t\t\t\tconst content = document.getElementById('projectDetailsContent');\n\t\t\t\tcontent.innerHTML = `\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t\t<h6>${project.name}</h6>\n\t\t\t\t\t\t\t<p><strong>ID:</strong> ${project.id}</p>\n\t\t\t\t\t\t\t<p><strong>Created:</strong> ${new Date(project.created_at.time).toLocaleString()}</p>\n\t\t\t\t\t\t\t<p><strong>Updated:</strong> ${project.updated_at.valid ? new Date(project.updated_at.time).toLocaleString() : 'Never'}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t\t<div class=\"btn-group-vertical w-100\">\n\t\t\t\t\t\t\t\t<button class=\"btn btn-outline-success mb-2\" onclick=\"editProjectBefore(${project.id})\">Manage Before Details</button>\n\t\t\t\t\t\t\t\t<button class=\"btn btn-outline-info mb-2\" onclick=\"editProjectAfter(${project.id})\">Manage After Details</button>\n\t\t\t\t\t\t\t\t<button class=\"btn btn-outline-warning mb-2\" onclick=\"editProject(${project.id})\">Edit Project</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\t\t\t\t\n\t\t\t\tconst modal = new bootstrap.Modal(document.getElementById('projectDetailsModal'));\n\t\t\t\tmodal.show();\n\t\t\t}\n\n\t\t\tfunction editProjectBefore(projectId) {\n\t\t\t\tcurrentProjectId = projectId;\n\t\t\t\tdocument.getElementById('beforeProjectId').value = projectId;\n\t\t\t\t\n\t\t\t\t// Load existing before data if available\n\t\t\t\tloadProjectBefore(projectId);\n\t\t\t\t\n\t\t\t\tconst modal = new bootstrap.Modal(document.getElementById('projectBeforeModal'));\n\t\t\t\tmodal.show();\n\t\t\t}\n\n\t\t\tasync function loadProjectBefore(projectId) {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(`/api/projects/${projectId}/before`);\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\t\tconst before = data.project_before;\n\t\t\t\t\t\tdocument.getElementById('beforeBody').value = before.body;\n\t\t\t\t\t\tdocument.getElementById('estimatedTarget').value = before.estimated_target;\n\t\t\t\t\t\tdocument.getElementById('beforeVideoLink').value = before.video_link.valid ? before.video_link.string : '';\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Project before doesn't exist yet, that's fine\n\t\t\t\t\tconsole.log('No before data found for project:', projectId);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tasync function saveProjectBefore() {\n\t\t\t\tconst projectId = document.getElementById('beforeProjectId').value;\n\t\t\t\tconst body = document.getElementById('beforeBody').value;\n\t\t\t\tconst estimatedTarget = document.getElementById('estimatedTarget').value;\n\t\t\t\tconst currentFunds = prompt('Enter current funds raised (number):', '0') || '0';\n\t\t\t\tconst videoLink = document.getElementById('beforeVideoLink').value;\n\t\t\t\tconst imageFile = document.getElementById('beforeImage').files[0];\n\n\t\t\t\tif (!body || !estimatedTarget) {\n\t\t\t\t\talert('Please fill in all required fields');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// Save before details\n\t\t\t\t\tconst response = await fetch(`/api/projects/${projectId}/before`, {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\tbody: body,\n\t\t\t\t\t\t\testimated_target: estimatedTarget,\n\t\t\t\t\t\t\tcurrent_funds: currentFunds,\n\t\t\t\t\t\t\tvideo_link: videoLink\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\t// Upload image if provided\n\t\t\t\t\t\tif (imageFile) {\n\t\t\t\t\t\t\tawait uploadProjectImage(projectId, imageFile, 'before');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\talert('Project before details saved successfully!');\n\t\t\t\t\t\tbootstrap.Modal.getInstance(document.getElementById('projectBeforeModal')).hide();\n\t\t\t\t\t\tloadProjects();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst error = await response.json();\n\t\t\t\t\t\talert('Error: ' + error.error);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\talert('Error saving project before details: ' + error.message);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction editProjectAfter(projectId) {\n\t\t\t\tcurrentProjectId = projectId;\n\t\t\t\tdocument.getElementById('afterProjectId').value = projectId;\n\t\t\t\t\n\t\t\t\t// Load existing after data if available\n\t\t\t\tloadProjectAfter(projectId);\n\t\t\t\t\n\t\t\t\tconst modal = new bootstrap.Modal(document.getElementById('projectAfterModal'));\n\t\t\t\tmodal.show();\n\t\t\t}\n\n\t\t\tasync function loadProjectAfter(projectId) {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(`/api/projects/${projectId}/after`);\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\t\tconst after = data.project_after;\n\t\t\t\t\t\tdocument.getElementById('afterBody').value = after.body.valid ? after.body.string : '';\n\t\t\t\t\t\tdocument.getElementById('projectCost').value = after.project_cost.valid ? after.project_cost.int32 : '';\n\t\t\t\t\t\tdocument.getElementById('afterVideoLink').value = after.video_link.valid ? after.video_link.string : '';\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Project after doesn't exist yet, that's fine\n\t\t\t\t\tconsole.log('No after data found for project:', projectId);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tasync function saveProjectAfter() {\n\t\t\t\tconst projectId = document.getElementById('afterProjectId').value;\n\t\t\t\tconst body = document.getElementById('afterBody').value;\n\t\t\t\tconst projectCost = document.getElementById('projectCost').value;\n\t\t\t\tconst videoLink = document.getElementById('afterVideoLink').value;\n\t\t\t\tconst imageFile = document.getElementById('afterImage').files[0];\n\n\t\t\t\tif (!body) {\n\t\t\t\t\talert('Please fill in the description');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// Save after details\n\t\t\t\t\tconst response = await fetch(`/api/projects/${projectId}/after`, {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\tbody: body,\n\t\t\t\t\t\t\tproject_cost: projectCost,\n\t\t\t\t\t\t\tvideo_link: videoLink\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\t// Upload image if provided\n\t\t\t\t\t\tif (imageFile) {\n\t\t\t\t\t\t\tawait uploadProjectImage(projectId, imageFile, 'after');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\talert('Project after details saved successfully!');\n\t\t\t\t\t\tbootstrap.Modal.getInstance(document.getElementById('projectAfterModal')).hide();\n\t\t\t\t\t\tloadProjects();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst error = await response.json();\n\t\t\t\t\t\talert('Error: ' + error.error);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\talert('Error saving project after details: ' + error.message);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tasync function uploadProjectImage(projectId, file, phase) {\n\t\t\t\tconst formData = new FormData();\n\t\t\t\tformData.append('image', file);\n\t\t\t\tformData.append('phase', phase);\n\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(`/api/projects/${projectId}/images`, {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tbody: formData\n\t\t\t\t\t});\n\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\tconsole.log('Image uploaded successfully');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst error = await response.json();\n\t\t\t\t\t\talert('Error uploading image: ' + error.error);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\talert('Error uploading image: ' + error.message);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction showCreateBlogModal() {\n\t\t\t\tconst modal = new bootstrap.Modal(document.getElementById('createBlogModal'));\n\t\t\t\tmodal.show();\n\t\t\t}\n\n\t\t\tasync function createBlogPost() {\n\t\t\t\tconst title = document.getElementById('blogTitle').value;\n\t\t\t\tconst body = document.getElementById('blogBody').value;\n\t\t\t\tconst imageFile = document.getElementById('blogImage').files[0];\n\n\t\t\t\tif (!title || !body) {\n\t\t\t\t\talert('Please fill in all required fields');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst formData = new FormData();\n\t\t\t\t\tformData.append('title', title);\n\t\t\t\t\tformData.append('body', body);\n\t\t\t\t\tif (imageFile) {\n\t\t\t\t\t\tformData.append('image', imageFile);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst response = await fetch('/api/blog-posts', {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tbody: formData\n\t\t\t\t\t});\n\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\talert('Blog post created successfully!');\n\t\t\t\t\t\tdocument.getElementById('createBlogForm').reset();\n\t\t\t\t\t\tbootstrap.Modal.getInstance(document.getElementById('createBlogModal')).hide();\n\t\t\t\t\t\tloadBlogPosts();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst error = await response.json();\n\t\t\t\t\t\talert('Error: ' + error.error);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\talert('Error creating blog post: ' + error.message);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tasync function loadBlogPosts() {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch('/api/blog-posts');\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\t\tdisplayBlogPosts(data.blog_posts);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdocument.getElementById('blogPostsList').innerHTML = '<p class=\"text-danger\">Error loading blog posts</p>';\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tdocument.getElementById('blogPostsList').innerHTML = '<p class=\"text-danger\">Error loading blog posts</p>';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction displayBlogPosts(posts) {\n\t\t\t\tconst container = document.getElementById('blogPostsList');\n\t\t\t\tif (posts.length === 0) {\n\t\t\t\t\tcontainer.innerHTML = '<p class=\"text-muted\">No blog posts found</p>';\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst html = posts.map(post => {\n\t\t\t\t\tconst imageUrl = post.image_link && post.image_link.Valid ? post.image_link.String : '';\n\t\t\t\t\tconst truncatedBody = post.body.length > 100 ? post.body.substring(0, 100) + '...' : post.body;\n\t\t\t\t\tconst createdDate = new Date(post.created_at.Time).toLocaleDateString();\n\t\t\t\t\t\n\t\t\t\t\treturn '<div class=\"card mb-3\">' +\n\t\t\t\t\t\t'<div class=\"card-body\">' +\n\t\t\t\t\t\t\t'<div class=\"row\">' +\n\t\t\t\t\t\t\t\t'<div class=\"col-md-8\">' +\n\t\t\t\t\t\t\t\t\t'<h6 class=\"card-title\">' + post.title + '</h6>' +\n\t\t\t\t\t\t\t\t\t'<p class=\"card-text text-muted\">' + truncatedBody + '</p>' +\n\t\t\t\t\t\t\t\t\t'<small class=\"text-muted\">Created: ' + createdDate + '</small>' +\n\t\t\t\t\t\t\t\t'</div>' +\n\t\t\t\t\t\t\t\t'<div class=\"col-md-4\">' +\n\t\t\t\t\t\t\t\t\t'<div class=\"btn-group btn-group-sm w-100\">' +\n\t\t\t\t\t\t\t\t\t\t'<button class=\"btn btn-outline-primary\" onclick=\"editBlogPost(' + post.id + ')\">Edit</button>' +\n\t\t\t\t\t\t\t\t\t\t'<button class=\"btn btn-outline-danger\" onclick=\"deleteBlogPost(' + post.id + ')\">Delete</button>' +\n\t\t\t\t\t\t\t\t\t'</div>' +\n\t\t\t\t\t\t\t\t'</div>' +\n\t\t\t\t\t\t\t'</div>' +\n\t\t\t\t\t\t\t(imageUrl ? '<div class=\"mt-2\"><img src=\"' + imageUrl + '\" class=\"img-fluid rounded\" style=\"max-height: 100px; object-fit: cover;\" alt=\"' + post.title + '\"></div>' : '') +\n\t\t\t\t\t\t'</div>' +\n\t\t\t\t\t'</div>';\n\t\t\t\t}).join('');\n\n\t\t\t\tcontainer.innerHTML = html;\n\t\t\t}\n\n\t\t\tasync function deleteBlogPost(postId) {\n\t\t\t\tif (!confirm('Are you sure you want to delete this blog post? This action cannot be undone.')) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(`/api/blog-posts/${postId}`, {\n\t\t\t\t\t\tmethod: 'DELETE'\n\t\t\t\t\t});\n\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\talert('Blog post deleted successfully!');\n\t\t\t\t\t\tloadBlogPosts();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst error = await response.json();\n\t\t\t\t\t\talert('Error: ' + error.error);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\talert('Error deleting blog post: ' + error.message);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction editBlogPost(postId) {\n\t\t\t\t// TODO: Implement blog post edit functionality\n\t\t\t\talert('Blog post edit functionality coming soon!');\n\t\t\t}\n\n\t\t\tfunction editProject(projectId) {\n\t\t\t\tcurrentProjectId = projectId;\n\t\t\t\tdocument.getElementById('editProjectId').value = projectId;\n\t\t\t\t\n\t\t\t\t// Load existing project data\n\t\t\t\tloadProjectForEdit(projectId);\n\t\t\t\t\n\t\t\t\tconst modal = new bootstrap.Modal(document.getElementById('editProjectModal'));\n\t\t\t\tmodal.show();\n\t\t\t}\n\n\t\t\tasync function loadProjectForEdit(projectId) {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(`/api/projects/${projectId}`);\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\t\tconst project = data.project;\n\t\t\t\t\t\t\n\t\t\t\t\t\tdocument.getElementById('editProjectName').value = project.name;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Load before data for target and current amounts\n\t\t\t\t\t\tconst beforeResponse = await fetch(`/api/projects/${projectId}/before`);\n\t\t\t\t\t\tif (beforeResponse.ok) {\n\t\t\t\t\t\t\tconst beforeData = await beforeResponse.json();\n\t\t\t\t\t\t\tconst before = beforeData.project_before;\n\t\t\t\t\t\t\tdocument.getElementById('editTargetAmount').value = before.estimated_target;\n\t\t\t\t\t\t\tdocument.getElementById('editCurrentAmount').value = before.current_funds;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.log('Error loading project for edit:', error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tasync function saveProjectEdit() {\n\t\t\t\tconst projectId = document.getElementById('editProjectId').value;\n\t\t\t\tconst name = document.getElementById('editProjectName').value;\n\t\t\t\tconst targetAmount = document.getElementById('editTargetAmount').value;\n\t\t\t\tconst currentAmount = document.getElementById('editCurrentAmount').value;\n\n\t\t\t\tif (!name || !targetAmount || !currentAmount) {\n\t\t\t\t\talert('Please fill in all required fields');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// Update project name\n\t\t\t\t\tconst projectResponse = await fetch(`/api/projects/${projectId}`, {\n\t\t\t\t\t\tmethod: 'PUT',\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify({ name: name })\n\t\t\t\t\t});\n\n\t\t\t\t\tif (projectResponse.ok) {\n\t\t\t\t\t\t// Update before data with new amounts\n\t\t\t\t\t\tconst beforeResponse = await fetch(`/api/projects/${projectId}/before`, {\n\t\t\t\t\t\t\tmethod: 'PUT',\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\t\testimated_target: targetAmount,\n\t\t\t\t\t\t\t\tcurrent_funds: currentAmount\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tif (beforeResponse.ok) {\n\t\t\t\t\t\t\talert('Project updated successfully!');\n\t\t\t\t\t\t\tbootstrap.Modal.getInstance(document.getElementById('editProjectModal')).hide();\n\t\t\t\t\t\t\tloadProjects();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst error = await beforeResponse.json();\n\t\t\t\t\t\t\talert('Error updating project amounts: ' + error.error);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst error = await projectResponse.json();\n\t\t\t\t\t\talert('Error updating project name: ' + error.error);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\talert('Error updating project: ' + error.message);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tasync function deleteProject(projectId) {\n\t\t\t\tif (!confirm('Are you sure you want to delete this project? This action cannot be undone.')) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(`/api/projects/${projectId}`, {\n\t\t\t\t\t\tmethod: 'DELETE'\n\t\t\t\t\t});\n\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\talert('Project deleted successfully!');\n\t\t\t\t\t\tloadProjects();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst error = await response.json();\n\t\t\t\t\t\talert('Error: ' + error.error);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\talert('Error deleting project: ' + error.message);\n\t\t\t\t}\n\t\t\t}\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Base("Admin Dashboard").Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
