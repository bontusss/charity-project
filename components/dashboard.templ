package components

templ Dashboard() {
	@Base("Admin Dashboard") {
		<div class="container-fluid">
			<div class="row">
				<div class="col-12">
					<h1 class="mb-4">Admin Dashboard</h1>
				</div>
			</div>
			
			<div class="row">
				<div class="col-md-8">
					<div class="card">
						<div class="card-header">
							<h5 class="card-title mb-0">Project Management</h5>
						</div>
						<div class="card-body">
							<button class="btn btn-primary mb-3" onclick="showCreateProjectModal()">
								<i class="fas fa-plus"></i> Create New Project
							</button>
							
							<div id="projectsList">
								<!-- Projects will be loaded here -->
								<div class="text-center">
									<div class="spinner-border" role="status">
										<span class="visually-hidden">Loading...</span>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
				
				<div class="col-md-4">
					<div class="card">
						<div class="card-header">
							<h5 class="card-title mb-0">Quick Actions</h5>
						</div>
						<div class="card-body">
							<div class="list-group">
								<a href="/projects" class="list-group-item list-group-item-action">
									<i class="fas fa-eye"></i> View Public Projects
								</a>
								<a href="/admin/login" class="list-group-item list-group-item-action">
									<i class="fas fa-sign-out-alt"></i> Logout
								</a>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<!-- Create Project Modal -->
		<div class="modal fade" id="createProjectModal" tabindex="-1">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Create New Project</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
					</div>
					<div class="modal-body">
						<form id="createProjectForm">
							<div class="mb-3">
								<label for="projectName" class="form-label">Project Name</label>
								<input type="text" class="form-control" id="projectName" name="name" required>
							</div>
						</form>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
						<button type="button" class="btn btn-primary" onclick="createProject()">Create Project</button>
					</div>
				</div>
			</div>
		</div>

		<!-- Project Details Modal -->
		<div class="modal fade" id="projectDetailsModal" tabindex="-1">
			<div class="modal-dialog modal-xl">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Project Details</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
					</div>
					<div class="modal-body">
						<div id="projectDetailsContent">
							<!-- Project details will be loaded here -->
						</div>
					</div>
				</div>
			</div>
		</div>

		<!-- Project Before Modal -->
		<div class="modal fade" id="projectBeforeModal" tabindex="-1">
			<div class="modal-dialog modal-lg">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Project Before Details</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
					</div>
					<div class="modal-body">
						<form id="projectBeforeForm">
							<input type="hidden" id="beforeProjectId">
							<div class="mb-3">
								<label for="beforeBody" class="form-label">Description</label>
								<textarea class="form-control" id="beforeBody" rows="4" required></textarea>
							</div>
							<div class="mb-3">
								<label for="estimatedTarget" class="form-label">Estimated Target (Amount)</label>
								<input type="number" class="form-control" id="estimatedTarget" required>
							</div>
							<div class="mb-3">
								<label for="beforeVideoLink" class="form-label">Video Link (Optional)</label>
								<input type="url" class="form-control" id="beforeVideoLink">
							</div>
							<div class="mb-3">
								<label for="beforeImage" class="form-label">Upload Before Image</label>
								<input type="file" class="form-control" id="beforeImage" accept="image/*">
							</div>
						</form>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
						<button type="button" class="btn btn-primary" onclick="saveProjectBefore()">Save Before Details</button>
					</div>
				</div>
			</div>
		</div>

		<!-- Project After Modal -->
		<div class="modal fade" id="projectAfterModal" tabindex="-1">
			<div class="modal-dialog modal-lg">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Project After Details</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
					</div>
					<div class="modal-body">
						<form id="projectAfterForm">
							<input type="hidden" id="afterProjectId">
							<div class="mb-3">
								<label for="afterBody" class="form-label">Description</label>
								<textarea class="form-control" id="afterBody" rows="4" required></textarea>
							</div>
							<div class="mb-3">
								<label for="projectCost" class="form-label">Actual Project Cost (Optional)</label>
								<input type="number" class="form-control" id="projectCost">
							</div>
							<div class="mb-3">
								<label for="afterVideoLink" class="form-label">Video Link (Optional)</label>
								<input type="url" class="form-control" id="afterVideoLink">
							</div>
							<div class="mb-3">
								<label for="afterImage" class="form-label">Upload After Image</label>
								<input type="file" class="form-control" id="afterImage" accept="image/*">
							</div>
						</form>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
						<button type="button" class="btn btn-primary" onclick="saveProjectAfter()">Save After Details</button>
					</div>
				</div>
			</div>
		</div>

		<script>
			let currentProjectId = null;

			// Load projects on page load
			document.addEventListener('DOMContentLoaded', function() {
				loadProjects();
			});

			function showCreateProjectModal() {
				const modal = new bootstrap.Modal(document.getElementById('createProjectModal'));
				modal.show();
			}

			async function createProject() {
				const name = document.getElementById('projectName').value;
				if (!name) {
					alert('Please enter a project name');
					return;
				}

				try {
					const response = await fetch('/api/projects', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({ name: name })
					});

					if (response.ok) {
						const result = await response.json();
						alert('Project created successfully!');
						document.getElementById('createProjectForm').reset();
						bootstrap.Modal.getInstance(document.getElementById('createProjectModal')).hide();
						loadProjects();
					} else {
						const error = await response.json();
						alert('Error: ' + error.error);
					}
				} catch (error) {
					alert('Error creating project: ' + error.message);
				}
			}

			async function loadProjects() {
				try {
					const response = await fetch('/api/projects');
					if (response.ok) {
						const data = await response.json();
						displayProjects(data.projects);
					} else {
						document.getElementById('projectsList').innerHTML = '<p class="text-danger">Error loading projects</p>';
					}
				} catch (error) {
					document.getElementById('projectsList').innerHTML = '<p class="text-danger">Error loading projects</p>';
				}
			}

			function displayProjects(projects) {
				const container = document.getElementById('projectsList');
				if (projects.length === 0) {
					container.innerHTML = '<p class="text-muted">No projects found</p>';
					return;
				}

				const html = projects.map(project => `
					<div class="card mb-3">
						<div class="card-body">
							<div class="row">
								<div class="col-md-8">
									<h6 class="card-title">${project.name}</h6>
									<p class="card-text text-muted">Created: ${new Date(project.created_at.time).toLocaleDateString()}</p>
								</div>
								<div class="col-md-4">
									<div class="btn-group btn-group-sm w-100">
										<button class="btn btn-outline-primary" onclick="viewProject(${project.id})">View</button>
										<button class="btn btn-outline-success" onclick="editProjectBefore(${project.id})">Before</button>
										<button class="btn btn-outline-info" onclick="editProjectAfter(${project.id})">After</button>
										<button class="btn btn-outline-warning" onclick="editProject(${project.id})">Edit</button>
										<button class="btn btn-outline-danger" onclick="deleteProject(${project.id})">Delete</button>
									</div>
								</div>
							</div>
						</div>
					</div>
				`).join('');

				container.innerHTML = html;
			}

			async function viewProject(projectId) {
				try {
					const response = await fetch(`/api/projects/${projectId}`);
					if (response.ok) {
						const data = await response.json();
						showProjectDetails(data.project);
					} else {
						alert('Error loading project details');
					}
				} catch (error) {
					alert('Error loading project details: ' + error.message);
				}
			}

			function showProjectDetails(project) {
				const content = document.getElementById('projectDetailsContent');
				content.innerHTML = `
					<div class="row">
						<div class="col-md-6">
							<h6>${project.name}</h6>
							<p><strong>ID:</strong> ${project.id}</p>
							<p><strong>Created:</strong> ${new Date(project.created_at.time).toLocaleString()}</p>
							<p><strong>Updated:</strong> ${project.updated_at.valid ? new Date(project.updated_at.time).toLocaleString() : 'Never'}</p>
						</div>
						<div class="col-md-6">
							<div class="btn-group-vertical w-100">
								<button class="btn btn-outline-success mb-2" onclick="editProjectBefore(${project.id})">Manage Before Details</button>
								<button class="btn btn-outline-info mb-2" onclick="editProjectAfter(${project.id})">Manage After Details</button>
								<button class="btn btn-outline-warning mb-2" onclick="editProject(${project.id})">Edit Project</button>
							</div>
						</div>
					</div>
				`;
				
				const modal = new bootstrap.Modal(document.getElementById('projectDetailsModal'));
				modal.show();
			}

			function editProjectBefore(projectId) {
				currentProjectId = projectId;
				document.getElementById('beforeProjectId').value = projectId;
				
				// Load existing before data if available
				loadProjectBefore(projectId);
				
				const modal = new bootstrap.Modal(document.getElementById('projectBeforeModal'));
				modal.show();
			}

			async function loadProjectBefore(projectId) {
				try {
					const response = await fetch(`/api/projects/${projectId}/before`);
					if (response.ok) {
						const data = await response.json();
						const before = data.project_before;
						document.getElementById('beforeBody').value = before.body;
						document.getElementById('estimatedTarget').value = before.estimated_target;
						document.getElementById('beforeVideoLink').value = before.video_link.valid ? before.video_link.string : '';
					}
				} catch (error) {
					// Project before doesn't exist yet, that's fine
					console.log('No before data found for project:', projectId);
				}
			}

			async function saveProjectBefore() {
				const projectId = document.getElementById('beforeProjectId').value;
				const body = document.getElementById('beforeBody').value;
				const estimatedTarget = document.getElementById('estimatedTarget').value;
				const videoLink = document.getElementById('beforeVideoLink').value;
				const imageFile = document.getElementById('beforeImage').files[0];

				if (!body || !estimatedTarget) {
					alert('Please fill in all required fields');
					return;
				}

				try {
					// Save before details
					const response = await fetch(`/api/projects/${projectId}/before`, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({
							body: body,
							estimated_target: estimatedTarget,
							video_link: videoLink
						})
					});

					if (response.ok) {
						// Upload image if provided
						if (imageFile) {
							await uploadProjectImage(projectId, imageFile, 'before');
						}
						
						alert('Project before details saved successfully!');
						bootstrap.Modal.getInstance(document.getElementById('projectBeforeModal')).hide();
						loadProjects();
					} else {
						const error = await response.json();
						alert('Error: ' + error.error);
					}
				} catch (error) {
					alert('Error saving project before details: ' + error.message);
				}
			}

			function editProjectAfter(projectId) {
				currentProjectId = projectId;
				document.getElementById('afterProjectId').value = projectId;
				
				// Load existing after data if available
				loadProjectAfter(projectId);
				
				const modal = new bootstrap.Modal(document.getElementById('projectAfterModal'));
				modal.show();
			}

			async function loadProjectAfter(projectId) {
				try {
					const response = await fetch(`/api/projects/${projectId}/after`);
					if (response.ok) {
						const data = await response.json();
						const after = data.project_after;
						document.getElementById('afterBody').value = after.body.valid ? after.body.string : '';
						document.getElementById('projectCost').value = after.project_cost.valid ? after.project_cost.int32 : '';
						document.getElementById('afterVideoLink').value = after.video_link.valid ? after.video_link.string : '';
					}
				} catch (error) {
					// Project after doesn't exist yet, that's fine
					console.log('No after data found for project:', projectId);
				}
			}

			async function saveProjectAfter() {
				const projectId = document.getElementById('afterProjectId').value;
				const body = document.getElementById('afterBody').value;
				const projectCost = document.getElementById('projectCost').value;
				const videoLink = document.getElementById('afterVideoLink').value;
				const imageFile = document.getElementById('afterImage').files[0];

				if (!body) {
					alert('Please fill in the description');
					return;
				}

				try {
					// Save after details
					const response = await fetch(`/api/projects/${projectId}/after`, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({
							body: body,
							project_cost: projectCost,
							video_link: videoLink
						})
					});

					if (response.ok) {
						// Upload image if provided
						if (imageFile) {
							await uploadProjectImage(projectId, imageFile, 'after');
						}
						
						alert('Project after details saved successfully!');
						bootstrap.Modal.getInstance(document.getElementById('projectAfterModal')).hide();
						loadProjects();
					} else {
						const error = await response.json();
						alert('Error: ' + error.error);
					}
				} catch (error) {
					alert('Error saving project after details: ' + error.message);
				}
			}

			async function uploadProjectImage(projectId, file, phase) {
				const formData = new FormData();
				formData.append('image', file);
				formData.append('phase', phase);

				try {
					const response = await fetch(`/api/projects/${projectId}/images`, {
						method: 'POST',
						body: formData
					});

					if (response.ok) {
						console.log('Image uploaded successfully');
					} else {
						const error = await response.json();
						alert('Error uploading image: ' + error.error);
					}
				} catch (error) {
					alert('Error uploading image: ' + error.message);
				}
			}

			function editProject(projectId) {
				// TODO: Implement edit functionality
				alert('Edit functionality coming soon!');
			}

			async function deleteProject(projectId) {
				if (!confirm('Are you sure you want to delete this project? This action cannot be undone.')) {
					return;
				}

				try {
					const response = await fetch(`/api/projects/${projectId}`, {
						method: 'DELETE'
					});

					if (response.ok) {
						alert('Project deleted successfully!');
						loadProjects();
					} else {
						const error = await response.json();
						alert('Error: ' + error.error);
					}
				} catch (error) {
					alert('Error deleting project: ' + error.message);
				}
			}
		</script>
	}
}
